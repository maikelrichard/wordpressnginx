# Definir base de imagem PHP com a versão desejada
FROM php:{{ env.phpVersion }}-{{ env.variant }}

{{ if env.version != "cli" then ( -}}
# Dependências persistentes
{{ if is_alpine then ( -}}
RUN set -eux; \
	apk add --no-cache \
		bash \
		ghostscript \
		imagemagick \
	;
{{ ) else ( -}}
RUN set -eux; \
	apt-get update; \
	apt-get install -y --no-install-recommends \
		ghostscript \
	; \
	rm -rf /var/lib/apt/lists/*
{{ ) end -}}
{{ ) else ( -}}
# Instalar dependências do wp-cli
RUN apk add --no-cache \
		bash \
		less \
		mysql-client

RUN set -ex; \
	mkdir -p /var/www/html; \
	chown -R www-data:www-data /var/www/html
WORKDIR /var/www/html
{{ ) end -}}

# Instalar as extensões PHP necessárias
RUN set -ex; \
	{{ if is_alpine then ( -}}
	apk add --no-cache --virtual .build-deps \
		$PHPIZE_DEPS \
		freetype-dev \
		icu-dev \
		imagemagick-dev libheif-dev \
		libavif-dev \
		libjpeg-turbo-dev \
		libpng-dev \
		libwebp-dev \
		libzip-dev \
	; \
	{{ ) else ( -}}
	savedAptMark="$(apt-mark showmanual)"; \
	apt-get update; \
	apt-get install -y --no-install-recommends \
		libavif-dev \
		libfreetype6-dev \
		libicu-dev \
		libjpeg-dev \
		libmagickwand-dev \
		libpng-dev \
		libwebp-dev \
		libzip-dev \
	; \
{{ ) end -}}
	\
	docker-php-ext-configure gd \
		--with-avif \
		--with-freetype \
		--with-jpeg \
		--with-webp \
	; \
	docker-php-ext-install -j "$(nproc)" \
		bcmath \
		exif \
		gd \
		intl \
		mysqli \
		zip \
	; \
# Instalar imagick
RUN pecl install imagick-3.7.0; \
	docker-php-ext-enable imagick; \
	rm -r /tmp/pear; \
	\
	# Garantir que as extensões estão corretamente carregadas
	out="$(php -r 'exit(0);')"; \
	[ -z "$out" ]; \
	err="$(php -r 'exit(0);' 3>&1 1>&2 2>&3)"; \
	[ -z "$err" ]; \

# Configuração recomendada para o PHP (Opcache)
RUN set -eux; \
	docker-php-ext-enable opcache; \
	{ \
		echo 'opcache.memory_consumption=128'; \
		echo 'opcache.interned_strings_buffer=8'; \
		echo 'opcache.max_accelerated_files=4000'; \
		echo 'opcache.revalidate_freq=2'; \
	} > /usr/local/etc/php/conf.d/opcache-recommended.ini

# Configurações para logs de erro do PHP
RUN { \
    echo 'error_reporting = E_ERROR | E_WARNING | E_PARSE | E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_COMPILE_WARNING | E_RECOVERABLE_ERROR'; \
    echo 'display_errors = Off'; \
    echo 'display_startup_errors = Off'; \
    echo 'log_errors = On'; \
    echo 'error_log = /dev/stderr'; \
    echo 'log_errors_max_len = 1024'; \
    echo 'ignore_repeated_errors = On'; \
    echo 'ignore_repeated_source = Off'; \
    echo 'html_errors = Off'; \
} > /usr/local/etc/php/conf.d/error-logging.ini

# Instalar o Nginx
RUN set -eux; \
	apt-get update && apt-get install -y nginx; \
	# Configurar o Nginx para servir o WordPress
	{ \
		echo 'server {'; \
		echo '    listen 80 default_server;' \
		echo '    root /var/www/html;' \
		echo '    index index.php index.html index.htm;' \
		echo '    server_name _;' \
		echo '    location / {'; \
		echo '        try_files $uri $uri/ /index.php?$args;'; \
		echo '    }'; \
		echo '    location ~ \.php$ {'; \
		echo '        include snippets/fastcgi-php.conf;' \
		echo '        fastcgi_pass 127.0.0.1:9000;' \
		echo '        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;' \
		echo '        include fastcgi_params;' \
		echo '    }'; \
		echo '}'; \
	} > /etc/nginx/sites-available/default; \
	\
	# Habilitar e iniciar o Nginx
	service nginx start

# Baixar e instalar o WordPress
RUN set -eux; \
    version={{ .upstream | @sh }}; \
    sha1={{ .sha1 | @sh }}; \
    curl -o wordpress.tar.gz -fL "https://wordpress.org/wordpress-$version.tar.gz"; \
    echo "$sha1 *wordpress.tar.gz" | sha1sum -c -; \
    tar -xzf wordpress.tar.gz -C /usr/src/; \
    rm wordpress.tar.gz; \
    \
    # Configuração do arquivo .htaccess para o WordPress
    [ ! -e /usr/src/wordpress/.htaccess ]; \
    { \
        echo '# BEGIN WordPress'; \
        echo ''; \
        echo 'RewriteEngine On'; \
        echo 'RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]'; \
    } > /usr/src/wordpress/.htaccess

# Copiar o WordPress para o diretório de trabalho
RUN cp -a /usr/src/wordpress/. /var/www/html/; \
    chown -R www-data:www-data /var/www/html; \
    chmod -R 755 /var/www/html

# Expor a porta 80
EXPOSE 80

# Iniciar o Nginx e o PHP-FPM
CMD ["bash", "-c", "service nginx start && php-fpm"]
